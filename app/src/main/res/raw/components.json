[
  {
    "noteName" : "UserInputActivity",
    "noteComponents" : [
      {
        "label" : "EditText",
        "content" : "A user interface element for entering and modifying text. When you define an edit text widget, you must specify the R.styleable.TextView_inputType attribute. For example, for plain text input set inputType to \"text\"",
        "snippets" : "android:inputType=\"text | datetime | number | phone | multi-line | email_address\""
      }
    ]
  }, {
    "noteName" : "IntentsActivity",
    "noteComponents" : [
      {
        "label" : "Intent Explicit",
        "content" : "Explicit intents specify which application will satisfy the intent, by supplying either the target app\'s package name or a fully-qualified component class name. You\'ll typically use an explicit intent to start a component in your own app, because you know the class name of the activity or service you want to start. For example, you might start a new activity within your app in response to a user action, or start a service to download a file in the background.",
        "snippets" : null
      }, {
        "label" : "Intent Implicit",
        "content" : "Implicit intents do not name a specific component, but instead declare a general action to perform, which allows a component from another app to handle it. For example, if you want to show the user a location on a map, you can use an implicit intent to request that another capable app show a specified location on a map.",
        "snippets" : [
          {
            "snippet" : "ACTION_GET_CONTENT",
            "detailed" : "Request that the user select a file such as a document or photo and return a reference to your app."
          }, {
            "snippet" : "ACTION_SEND",
            "detailed" : "Compose an email with optional attachments."
          }, {
            "snippet" : "ACTION_IMAGE/VIDEO_CAPTURE",
            "detailed" : "Open a camera app and receive the resulting photo or video."
          }, {
            "snippet" : "ACTION_VIEW",
            "detailed" : "Open a web page, open a contact"
          }
        ]
      }
    ]
  }, {
    "noteName" : "HTTPNetworkingActivity",
    "noteComponents" : [
      {
        "label" : "Uri",
        "content" : "A Uniform Resource Identifier(URI) is a string of characters designed for unambiguous identification of resources and extensibility via the URI scheme.",
        "snippets" : "URI = scheme:[//authority]path[?query][#fragment]"
      }, {
        "label" : "Url",
        "content" : "A Uniform Resource Locator (URL), is a reference to a resource that specifies its location on a computer network and a mechanism for retrieving it. A URL is a specific type of Uniform Resource Identifier (URI), URLs occur most commonly to reference web pages (http), but are also used for file transfer (ftp), email (mailto), database access (JDBC), and many other applications.",
        "snippets" : "URL = scheme:[//authority]path[?query][#fragment]"
      }, {
        "label" : "Scheme",
        "content" : "Each URI begins with a scheme name that refers to a specification for assigning identifiers within that scheme. It simply tells you how to interpret the part of the URL after the colon.",
        "snippets" : "file://usr/share/doc - the file tells me the part after the colon should be interpreted as a locally-available filesystem path and not a specific protocol.\n\nhttps://programmers.stackexchange.com - specifies a protocol (https), but still requires the client to make its own choices about the physical transport used to reach it."
      }, {
        "label" : "Authority",
        "content" : "The Authority property is typically a server DNS host name or IP address. It might include the service port number if it differs from the default port for the URI.",
        "snippets" : "authority = [userinfo@]host[:port]\n\n2942341@bbc.com:80"
      }, {
        "label" : "Host",
        "content" : "The host conforms to the domain name of a specific server we are willing to connect to.",
        "snippets" : "host = www.example.com"
      }, {
        "label" : "Path",
        "content" : "A path component, consisting of a sequence of path segments separated by a slash (/). A path is always defined for a URI. A path component may resemble or map exactly to the resource location.",
        "snippets" : "path = /forum/questions/"
      }, {
        "label" : "Query",
        "content" : "Query string is the part of a uniform resource locator(URL) containing data that does not fit conveniently into a hierarchical path structure. The query string commonly includes fields added to a base URL used by the application by parsing it and process it to return desired data.",
        "snippets" : "query = ?tag=networking&amp;order=newest#top"
      }
    ]
  }, {
    "noteName" : "ActivityLifecycleActivity",
    "noteComponents" : [
      {
        "label" : "Application Context",
        "content" : "Application context is attached to the application's life-cycle and will always be same throughout the life of application. Usually you can use it for initializing different Android application components(start a service, send a broadcast, initialize a broadcast receiver, get access to application resources) that doesn't necessarily depend on current activity or being attached to anyone at all.",
        "snippets" : [
          {
            "snippet" : "this.getApplication()",
            "detailed" : "The activity class it's referring to ContextWrapper class, on the contrary Application class extends it too, where both are referring to super class Context."
          }, {
            "snippet" : "this.getApplicationContext()",
            "detailed" : "Same as this.getApplication() but the application is referring the Context class, thus we get a reference directly."
          }
        ]
      }, {
        "label" : "Activity Context",
        "content" : "Activity Context is attached to the Activity's life-cycle and can be destroyed if the activity's onDestroy() is raised. ",
        "snippets" : [
          {
            "snippet" : "CurrentActivity.this",
            "detailed" : "When dealing with nesting non-static classes, you can get a reference of your outer' class instance, thus the current activity's context too."
          }, {
            "snippet" : "this.getBaseContext()",
            "detailed" : "BaseContext effectively returns which ever context is being wrapped by ContextWrapper, it can be anything either an Activity or Application Context set by constructor or by ContextWrapper' setBaseContext method."
          }
        ]
      }
    ]
  }
]